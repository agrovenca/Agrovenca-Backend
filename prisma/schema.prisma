generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String
  lastName  String?
  email     String   @unique
  password  String
  isMod     Boolean  @default(false)
  isAdmin   Boolean  @default(false)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  categories        Category[]        @relation("UserCategories")
  resetPassword     ResetPassword[]   @relation("UserResetPassword")
  products          Product[]         @relation("UserProducts")
  shippingAddresses ShippingAddress[] @relation("UserShippingAddresses")
}

model ResetPassword {
  id        String   @id @default(uuid())
  code      String   @unique
  isUsed    Boolean  @default(false)
  createdAt DateTime @default(now())
  expiredAt DateTime
  userId    String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, name: "UserResetPassword")
}

model Category {
  id          String   @id @default(uuid())
  name        String   @unique @db.VarChar(50)
  description String?  @db.VarChar(255)
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  userId      String

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade, name: "UserCategories")
  products Product[] @relation("CategoryProducts")

  @@index([userId, id])
}

model Unity {
  id          String   @id @default(uuid())
  name        String   @unique @db.VarChar(50)
  description String?  @db.VarChar(255)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt

  products Product[] @relation("UnityProducts")
}

model Coupon {
  id          String     @id @default(uuid())
  code        String     @unique @db.VarChar(50)
  description String?    @db.VarChar(255)
  discount    Float      @default(0.0)
  active      Boolean    @default(true)
  type        CouponType @default(PERCENTAGE)
  usageLimit  Int?
  timesUsed   Int        @default(0)
  expiresAt   DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

enum CouponType {
  PERCENTAGE
  FIXED
}

model Product {
  id           String   @id @default(uuid())
  slug         String   @unique @db.VarChar(300)
  name         String   @unique @db.VarChar(300)
  description  String   @db.VarChar(900)
  price        Decimal  @default(0.0) @db.Decimal(7, 2)
  secondPrice  Decimal? @default(0.0) @db.Decimal(7, 2)
  stock        Int      @default(1)
  freeShipping Boolean  @default(true)
  videoId      String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  displayOrder Int      @default(0)

  userId     String
  categoryId String
  unityId    String

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade, name: "UserProducts")
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade, name: "CategoryProducts")
  unity    Unity    @relation(fields: [unityId], references: [id], onDelete: Cascade, name: "UnityProducts")
  images   Image[]  @relation("ProductImages")

  @@index([categoryId, displayOrder])
  @@index([unityId])
}

model Image {
  id           String   @id @default(uuid())
  s3Key        String   @unique @db.VarChar(800)
  productId    String
  displayOrder Int      @default(0)
  product      Product  @relation(fields: [productId], references: [id], onDelete: Cascade, name: "ProductImages")
  createdAt    DateTime @default(now())

  @@index([productId])
}

model ShippingAddress {
  pk             String   @id @default(uuid())
  alias          String   @db.VarChar(100)
  name           String   @db.VarChar(150)
  lastName       String   @db.VarChar(150)
  email          String
  phone          String   @db.VarChar(30)
  address_line_1 String   @db.VarChar(250)
  country        String
  state          String
  city           String
  isDefault      Boolean  @default(false)
  createdAt      DateTime @default(now())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, name: "UserShippingAddresses")
}
